version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment stacks with ID: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name "udapeople-backend-"<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-"<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration
    parameters:
    workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`cat migration_result_<< parameters.workflow_id >>.txt`
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10.5-alpine3.16
        environment:
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
          TYPEORM_MIGRATIONS_DIR: $TYPEORM_MIGRATIONS_DIR
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5b:a0:10:23:6a:c6:5e:f2:c0:c8:cd:ca:17:df:90:c4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Install Python3
          command: apk add --no-cache python3
      - run:
          name: Install AWS CLI
          command: pip install awscli
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # - image: cimg/node:18.7.0
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          # From: https://knowledge.udacity.com/questions/397859
          name: Install AWS CLI
          command: |
            echo "insecure" >> ~/.curlrc
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Run migrations
          command: |
            # Run and save the migration output
            cd backend
            npm run migrations > migrations_dump.txt
      - run:
          name: Create migration result file to save to workspace
          command: |
            cd backend
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              echo "1" > migration_result_${CIRCLE_WORKFLOW_ID:0:7}.txt
            else
              echo "0" > migration_result_${CIRCLE_WORKFLOW_ID:0:7}.txt
            fi
            echo "Migration Result:"
            cat migration_result_${CIRCLE_WORKFLOW_ID:0:7}.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/migration_result_${CIRCLE_WORKFLOW_ID:0:7}.txt
      # revert migrations and rollback on failure
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: yum install -y tar
      - run:
          name: Install gzip
          command: yum install -y gzip
      - run:
          name: Install Node
          command: |
            # Fetch NodeSource long-term support (LTS) binary and install using YUM
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # revert migrations and rollback on failure
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10.5-alpine3.16
        environment:
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
          TYPEORM_MIGRATIONS_DIR: $TYPEORM_MIGRATIONS_DIR
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5b:a0:10:23:6a:c6:5e:f2:c0:c8:cd:ca:17:df:90:c4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Install Python3
          command: apk add --no-cache python3
      - run:
          name: Install AWS CLI
          command: pip install awscli
      - run:
          name: Install NPM
          command: apk add --update npm
      - run:
          name: Deploy backend
          command: |
            echo "TYPEORM_DATABASE="${TYPEORM_DATABASE}
            cd backend
            echo NODE_ENV=local > .env
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            # Deploy using Ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      # revert migrations and rollback on failure
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install Python3
          command: apk add --no-cache python3
      - run:
          name: Install Pip3
          command: apk add --no-cache py3-pip
      - run:
          name: Install AWS CLI
          command: pip install awscli
      - run:
          name: Install Curl
          command: apk add --update curl
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # revert migrations and rollback on failure
      - revert-migrations
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
